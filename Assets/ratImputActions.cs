//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/ratImputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RatImputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RatImputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ratImputActions"",
    ""maps"": [
        {
            ""name"": ""raton"",
            ""id"": ""1acb7fe3-8946-4fb5-bd69-c2ce22f7bbfc"",
            ""actions"": [
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""205c6806-8254-495d-bfb0-fe342dc0c99c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""movePlayer"",
                    ""type"": ""Value"",
                    ""id"": ""59a17fc3-2c72-4045-ac0f-f5c1f0049c6b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e4b2732-c36b-4bc6-8447-3b678a3c75e3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""21c977d6-264e-41a7-9433-83b49ee0f218"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movePlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d7201499-94c6-448e-8029-8006b43cf2da"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""70c54ef4-e97e-407e-a14a-61bfb2e97f98"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // raton
        m_raton = asset.FindActionMap("raton", throwIfNotFound: true);
        m_raton_jump = m_raton.FindAction("jump", throwIfNotFound: true);
        m_raton_movePlayer = m_raton.FindAction("movePlayer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // raton
    private readonly InputActionMap m_raton;
    private List<IRatonActions> m_RatonActionsCallbackInterfaces = new List<IRatonActions>();
    private readonly InputAction m_raton_jump;
    private readonly InputAction m_raton_movePlayer;
    public struct RatonActions
    {
        private @RatImputActions m_Wrapper;
        public RatonActions(@RatImputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @jump => m_Wrapper.m_raton_jump;
        public InputAction @movePlayer => m_Wrapper.m_raton_movePlayer;
        public InputActionMap Get() { return m_Wrapper.m_raton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RatonActions set) { return set.Get(); }
        public void AddCallbacks(IRatonActions instance)
        {
            if (instance == null || m_Wrapper.m_RatonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RatonActionsCallbackInterfaces.Add(instance);
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @movePlayer.started += instance.OnMovePlayer;
            @movePlayer.performed += instance.OnMovePlayer;
            @movePlayer.canceled += instance.OnMovePlayer;
        }

        private void UnregisterCallbacks(IRatonActions instance)
        {
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @movePlayer.started -= instance.OnMovePlayer;
            @movePlayer.performed -= instance.OnMovePlayer;
            @movePlayer.canceled -= instance.OnMovePlayer;
        }

        public void RemoveCallbacks(IRatonActions instance)
        {
            if (m_Wrapper.m_RatonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRatonActions instance)
        {
            foreach (var item in m_Wrapper.m_RatonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RatonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RatonActions @raton => new RatonActions(this);
    public interface IRatonActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovePlayer(InputAction.CallbackContext context);
    }
}
